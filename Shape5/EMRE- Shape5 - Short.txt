public override bool Contains(PointF point)
        {
            var px = point.X;
            var x = Rectangle.X + (Rectangle.Width / 2);
            var rx = Rectangle.Width / 2;
            var py = point.Y;
            var y = Rectangle.Y + Rectangle.Height / 2;
            var ry = Rectangle.Height / 2;


            if (((Math.Pow(px - x, 2) / Math.Pow(rx, 2)) + (Math.Pow(py - y, 2) / Math.Pow(ry, 2))) <= 1)

                // Проверка дали е в обекта само, ако точката е в обхващащия правоъгълник.
                // В случая на правоъгълник - директно връщаме true
                return true;
            else
                // Ако не е в обхващащия правоъгълник, то неможе да е в обекта и => false
                return false;
        }

        /// <summary>
        /// Частта, визуализираща конкретния примитив.
        /// </summary>
        public override void DrawSelf(Graphics grfx)
        {
            base.DrawSelf(grfx);
            base.RotateShape(grfx);

            var pointE = new PointF(Rectangle.X + Rectangle.Width / 2, Rectangle.Y);
            var pointF = new PointF(Rectangle.X + Rectangle.Height / 2, Rectangle.Y + Rectangle.Height);

            var pointC = new PointF(Rectangle.X + Rectangle.Width / 2 - 50, Rectangle.Y + 20);
            var pointD = new PointF(Rectangle.X + Rectangle.Height / 2 - 50, Rectangle.Y + Rectangle.Height - 20);

            var pointP = new PointF(Rectangle.X + Rectangle.Height / 2 + 50, Rectangle.Y + 20);
            var pointG = new PointF(Rectangle.X + Rectangle.Width / 2 + 50, Rectangle.Y + Rectangle.Width - 20);

            var pointA = new PointF(Rectangle.X, Rectangle.Y + Rectangle.Width / 2);
            var pointB = new PointF(Rectangle.X + Rectangle.Width, Rectangle.Y + Rectangle.Height / 2);
            grfx.FillEllipse(new SolidBrush(Color.FromArgb(Opacity, FillColor)), Rectangle.X, Rectangle.Y, Rectangle.Width, Rectangle.Height);
            grfx.DrawEllipse(new Pen(BorderColor, BorderWidth), Rectangle.X, Rectangle.Y, Rectangle.Width, Rectangle.Height);

            grfx.DrawLine(Pens.Black, pointE, pointF);
            grfx.DrawLine(Pens.Black, pointA, pointB);
            grfx.DrawLine(Pens.Black, pointC, pointD);
            grfx.DrawLine(Pens.Black, pointP, pointG);

            grfx.ResetTransform();
        }