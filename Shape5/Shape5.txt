1. MainForm -   private void circle5_Click(object sender, EventArgs e)
        {
            dialogProcessor.AddRandomCircle5();

            statusBar.Items[0].Text = "Последно действие: Рисуване на now кръг";

            viewPort.Invalidate();
        }

2. Model -  public class Circle5 : Shape
    {
        #region Constructor

        public Circle5(RectangleF rect) : base(rect)
        {
        }

        public Circle5(Circle5 oval) : base(oval)
        {
        }

        #endregion

        /// <summary>
        /// Проверка за принадлежност на точка point към правоъгълника.
        /// В случая на правоъгълник този метод може да не бъде пренаписван, защото
        /// Реализацията съвпада с тази на абстрактния клас Shape, който проверява
        /// дали точката е в обхващащия правоъгълник на елемента (а той съвпада с
        /// елемента в този случай).
        /// </summary>

        public override bool Contains(PointF point)
        {
            var px = point.X;
            var x = Rectangle.X + (Rectangle.Width / 2);
            var rx = Rectangle.Width / 2;
            var py = point.Y;
            var y = Rectangle.Y + Rectangle.Height / 2;
            var ry = Rectangle.Height / 2;


            if (((Math.Pow(px - x, 2) / Math.Pow(rx, 2)) + (Math.Pow(py - y, 2) / Math.Pow(ry, 2))) <= 1)

                // Проверка дали е в обекта само, ако точката е в обхващащия правоъгълник.
                // В случая на правоъгълник - директно връщаме true
                return true;
            else
                // Ако не е в обхващащия правоъгълник, то неможе да е в обекта и => false
                return false;
        }

        /// <summary>
        /// Частта, визуализираща конкретния примитив.
        /// </summary>
        public override void DrawSelf(Graphics grfx)
        {
            base.DrawSelf(grfx);
            base.RotateShape(grfx);
            //  GraphicsState state = grfx.Save();
            // kopie na teku]a koord s-ma

            /* var m = grfx.Transform.Clone();

             m.Multiply(Rotate);
            grfx.Transform = m;
            */
            // GORNA LQWA
            // PointF pointA = new PointF(Rectangle.X, Rectangle.Y);
            // DOLNA DQSNA
            //  PointF pointB = new PointF(Rectangle.X + Rectangle.Width, Rectangle.Y + Rectangle.Height);

            /* PointF pointC = new PointF(Rectangle.Y, Rectangle.X);
             PointF pointD = new PointF(Rectangle.Y + Rectangle.Width, Rectangle.X + Rectangle.Height);*/

            // GORNA DQSNA
            //  PointF pointC = new PointF(Rectangle.Width + Rectangle.X, Rectangle.Y);
            // DOLNA LQWA
            // liniq do sredata
            // PointF pointD = new PointF(Rectangle.X + Rectangle.Width / 2 , Rectangle.Y + Rectangle.Height / 2);
            //PointF pointD = new PointF(Rectangle.X, Rectangle.Y + Rectangle.Height);

            var pointE = new PointF(Rectangle.X + Rectangle.Width / 2, Rectangle.Y);
            var pointF = new PointF(Rectangle.X + Rectangle.Height / 2, Rectangle.Y + Rectangle.Height);

            var pointC = new PointF(Rectangle.X  + Rectangle.Width / 2 - 50, Rectangle.Y + 20);
            var pointD = new PointF(Rectangle.X + Rectangle.Height / 2 - 50, Rectangle.Y + Rectangle.Height - 20);

            var pointP = new PointF(Rectangle.X + Rectangle.Height / 2 + 50, Rectangle.Y + 20);
            var pointG = new PointF(Rectangle.X + Rectangle.Width / 2 + 50, Rectangle.Y + Rectangle.Width - 20);

            var pointA = new PointF(Rectangle.X , Rectangle.Y  +  Rectangle.Width / 2);
            var pointB = new PointF(Rectangle.X + Rectangle.Width, Rectangle.Y + Rectangle.Height / 2);
            grfx.FillEllipse(new SolidBrush(FillColor), Rectangle.X, Rectangle.Y, Rectangle.Width, Rectangle.Height);
            grfx.DrawEllipse(new Pen(StrokeColor), Rectangle.X, Rectangle.Y, Rectangle.Width, Rectangle.Height);
            // grfx.DrawLine(Pens.Black, pointA, pointD);
            // grfx.DrawLine(Pens.Black, pointB, pointC);
            grfx.DrawLine(Pens.Black, pointE, pointF);
            grfx.DrawLine(Pens.Black, pointA, pointB);
            grfx.DrawLine(Pens.Black, pointC, pointD);
            grfx.DrawLine(Pens.Black, pointP, pointG);


            grfx.ResetTransform();

            // grfx.Restore(state);

        }
    }
}

3. DialogProcessor - 	public void AddRandomCircle5()
		{
			Random rnd = new Random();
			int x = rnd.Next(100, 600);
			int y = rnd.Next(100, 600);

			Circle5 oval = new Circle5(new Rectangle(x, y, 150, 150));
			oval.FillColor = Color.FromArgb(10, 10, 10, 10);
			oval.StrokeColor = Color.Blue;
			oval.Rotate.RotateAt(45, new PointF(oval.Rectangle.X + oval.Width / 2, oval.Rectangle.Y + oval.Height / 2));
			ShapeList.Add(oval);
		}