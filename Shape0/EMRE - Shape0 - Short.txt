public override bool Contains(PointF point)
        {
            if (base.Contains(point))
                // Проверка дали е в обекта само, ако точката е в обхващащия правоъгълник.
                // В случая на правоъгълник - директно връщаме true
                return true;
            else
                // Ако не е в обхващащия правоъгълник, то неможе да е в обекта и => false
                return false;
        }

        /// <summary>
        /// Частта, визуализираща конкретния примитив.
        /// </summary>
        public override void DrawSelf(Graphics grfx)
        {
            base.DrawSelf(grfx);

            base.RotateShape(grfx);
            PointF[] triangleCoordinates = {

                new Point((int)Rectangle.X + ((int)Rectangle.Width / 2), (int)Rectangle.Y),
                new Point((int)Rectangle.X, (int)(Rectangle.Y + Rectangle.Height)),
                new Point((int)(Rectangle.X + Rectangle.Width), (int)(Rectangle.Y + Rectangle.Height))
            };

            PointF pointD = new PointF(Rectangle.X + Rectangle.Width / 2, Rectangle.Y + Rectangle.Height / 2);
            PointF pointC = new PointF(Rectangle.X, Rectangle.Y + Rectangle.Height);

            PointF pointA = new PointF(Rectangle.X + Rectangle.Width, Rectangle.Y + Rectangle.Height);
            PointF pointB = new PointF(Rectangle.X + Rectangle.Width / 2, Rectangle.Y + Rectangle.Height / 2);

            PointF pointE = new Point((int)Rectangle.X + ((int)Rectangle.Width / 2), (int)Rectangle.Y);


            PointF pointF = new PointF(Rectangle.X + Rectangle.Width / 2, Rectangle.Y + Rectangle.Height / 2);
            grfx.FillPolygon(new SolidBrush(Color.FromArgb(Opacity, FillColor)), triangleCoordinates);
            grfx.DrawPolygon(new Pen(BorderColor, BorderWidth), triangleCoordinates);

            grfx.DrawLine(Pens.Black, pointC, pointD);
            grfx.DrawLine(Pens.Black, pointB, pointA);
            grfx.DrawLine(Pens.Black, pointE, pointF);

            grfx.ResetTransform();
        }